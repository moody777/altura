import { type ClientSchema, a, defineData } from "@aws-amplify/backend";

const schem = a.schema({ 
  Todo: a
    .model({
      content: a.string(),
    }),
    Startup:a.model({
      id: a.id(),
      name: a.string().required(),
      description: a.string().required(),
      logo: a.string(),
      owner: a.string(),
      type: a.enum(['research' , 'profit' , 'nonprofit']),
      sector: a.string().required(),
      city: a.string().required(),
      country: a.string().required(),
      teamSize: a.string().required(),
      fundingNeeds: a.string(),
      hiringStatus: a.enum(['urgent' , 'open' , 'nothiring']),
      founderId: a.id(),
      website: a.string(),
      likes: a.integer(),
      commentsNo: a.integer(),
      founder: a.belongsTo('User','founderId'),
      jobs: a.hasMany('Job','startupId'),
      investments: a.hasMany('Investment','startupId'),
      comments: a.hasMany('Comment','startupId'),
    }),
    Job:a.model({
      id: a.id(),
      owner: a.string(),
      startupId: a.id(),
      title: a.string().required(),
      description: a.string().required(),
      salary: a.customType({
        min: a.integer().required(),
        max: a.integer(),
      }),
      equity: a.string(),
      city: a.string().required(),
      country: a.string().required(),
      workMode: a.enum(['onsite' , 'remote' , 'hybrid']),
      startup: a.belongsTo('Startup','startupId'),
      jobApplications: a.hasMany('JobApplication','jobId'),
    }),
    Investment:a.model({
      id: a.id(),
      startupId: a.id(),
      startupName: a.string().required(),
      sector: a.string().required(),
      stage: a.string().required(),
      investmentAmount: a.integer().required(),
      equity: a.float().required(),
      date: a.string().required(),
      status: a.enum(['active', 'exited', 'writtenoff']),
      currentValue: a.integer().required(),
      gain: a.float().required(),
      owner: a.string(),
      location: a.string().required(),
      description: a.string().required(),
      tags: a.string().array().required(),
      investorId: a.id(),
      investor: a.belongsTo('Investor','investorId'),
      startup: a.belongsTo('Startup','startupId'),      
    }),
    Comment:a.model({
      id: a.id(),
      owner: a.string(),
      userId: a.id(),
      startupId: a.id(),
      content: a.string().required(),
      timestamp: a.string().required(),
      likes: a.integer().required(),
      startup: a.belongsTo('Startup','startupId'),
      user: a.belongsTo('User','userId'),
    }),
    JobApplication:a.model({
      id: a.id(),
      jobId: a.id(),
      owner: a.string(),
      applicantId: a.id(),
      status: a.enum(['pending' , 'reviewed' , 'interviewed' , 'accepted' , 'rejected']),
      workMode: a.enum(['onsite' , 'remote' , 'hybrid']),
      job: a.belongsTo('Job','jobId'),
      applicant: a.belongsTo('JobSeeker','applicantId'),
      
    }),
    User:a.model({
      id: a.id(),
      email: a.string().required(),
      name: a.string().required(),
      role: a.enum(['startup', 'investor', 'job_seeker']),
      onboardingComplete: a.boolean().required(),
      city: a.string(),
      country: a.string(),
      phone: a.string(),
      linkedin: a.string(),
      bio: a.string(),
      owner: a.string(),
      portfolio: a.string(),
      startups: a.hasOne('Startup','founderId'),
      jobSeekers: a.hasOne('JobSeeker','userId'),
      investors: a.hasOne('Investor','userId'),
      comments: a.hasMany('Comment','userId'),
    }),
    Education: a.model({
      jobSeekerId: a.id(),
      jobSeeker: a.belongsTo('JobSeeker','jobSeekerId'),
      degree: a.string(),
      owner: a.string(),
      fieldOfStudy: a.string(),
      institution: a.string(),
      graduationYear: a.string(),
      gpa: a.string()
    }),
    Experience: a.model({
      jobSeekerId: a.id(),
      jobSeeker: a.belongsTo('JobSeeker','jobSeekerId'),
      company: a.string(),
      owner: a.string(),
      position: a.string(),
      startDate: a.string(),
      endDate: a.string(),
      description: a.string(),
    }),
    JobSeeker:a.model({
      id: a.id(),
      userId: a.id(),
      owner: a.string(),
      desiredSalary: a.integer().required(),
      skills: a.string().array().required(),
      education: a.hasMany('Education','jobSeekerId'),
      experience: a.hasMany('Experience','jobSeekerId'),
      certifications: a.string().array().required(),
      languages: a.string().array().required(),
      user: a.belongsTo('User','userId'),
      jobApplications: a.hasMany('JobApplication','applicantId'),
    }),
    Investor:a.model({
      id: a.id(),
      userId: a.id(),
      owner: a.string(),
      investmentRange: a.string().required(),
      sectors: a.string().array().required(),
      investments: a.hasMany('Investment','investorId'),
      user: a.belongsTo('User','userId'),
    }),

    
  }).authorization((allow) => [
    allow.guest().to(['read']),
    allow.owner(),
  ]);
export const schema = defineData({schema: schem});
export type Schema = ClientSchema<typeof schem>;



type Todo @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  content: String
}

type Startup @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  name: String!
  description: String!
  logo: String
  owner: String
  type: StartupType
  sector: String!
  city: String!
  country: String!
  teamSize: String!
  fundingNeeds: String
  hiringStatus: StartupHiringStatus
  founderId: ID
  website: String
  likes: Int
  commentsNo: Int
  founder: User @belongsTo(references: ["founderId"])
  jobs: [Job] @hasMany(references: ["startupId"])
  investments: [Investment] @hasMany(references: ["startupId"])
  comments: [Comment] @hasMany(references: ["startupId"])
}

type Job @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  owner: String
  startupId: ID
  title: String!
  description: String!
  salary: JobSalary
  equity: String
  city: String!
  country: String!
  workMode: JobWorkMode
  startup: Startup @belongsTo(references: ["startupId"])
  jobApplications: [JobApplication] @hasMany(references: ["jobId"])
}

type Investment @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  startupId: ID
  startupName: String!
  sector: String!
  stage: String!
  investmentAmount: Int!
  equity: Float!
  date: String!
  status: InvestmentStatus
  currentValue: Int!
  gain: Float!
  owner: String
  location: String!
  description: String!
  tags: [String]!
  investorId: ID
  investor: Investor @belongsTo(references: ["investorId"])
  startup: Startup @belongsTo(references: ["startupId"])
}

type Comment @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  owner: String
  userId: ID
  startupId: ID
  content: String!
  timestamp: String!
  likes: Int!
  startup: Startup @belongsTo(references: ["startupId"])
  user: User @belongsTo(references: ["userId"])
}

type JobApplication @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  jobId: ID
  owner: String
  applicantId: ID
  status: JobApplicationStatus
  workMode: JobApplicationWorkMode
  job: Job @belongsTo(references: ["jobId"])
  applicant: JobSeeker @belongsTo(references: ["applicantId"])
}

type User @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  email: String!
  name: String!
  role: UserRole
  onboardingComplete: Boolean!
  city: String
  country: String
  phone: String
  linkedin: String
  bio: String
  owner: String
  portfolio: String
  startups: Startup @hasOne(references: ["founderId"])
  jobSeekers: JobSeeker @hasOne(references: ["userId"])
  investors: Investor @hasOne(references: ["userId"])
  comments: [Comment] @hasMany(references: ["userId"])
}

type Education @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  jobSeekerId: ID
  jobSeeker: JobSeeker @belongsTo(references: ["jobSeekerId"])
  degree: String
  owner: String
  fieldOfStudy: String
  institution: String
  graduationYear: String
  gpa: String
}

type Experience @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  jobSeekerId: ID
  jobSeeker: JobSeeker @belongsTo(references: ["jobSeekerId"])
  company: String
  owner: String
  position: String
  startDate: String
  endDate: String
  description: String
}

type JobSeeker @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  userId: ID
  owner: String
  desiredSalary: Int!
  skills: [String]!
  education: [Education] @hasMany(references: ["jobSeekerId"])
  experience: [Experience] @hasMany(references: ["jobSeekerId"])
  certifications: [String]!
  languages: [String]!
  user: User @belongsTo(references: ["userId"])
  jobApplications: [JobApplication] @hasMany(references: ["applicantId"])
}

type Investor @model @auth(rules: [{allow: public, provider: iam, operations: [read]},
  {allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  userId: ID
  owner: String
  investmentRange: String!
  sectors: [String]!
  investments: [Investment] @hasMany(references: ["investorId"])
  user: User @belongsTo(references: ["userId"])
}

enum StartupType {
  research
  profit
  nonprofit
}

enum StartupHiringStatus {
  urgent
  open
  nothiring
}

type JobSalary 
{
  min: Int!
  max: Int
}

enum JobWorkMode {
  onsite
  remote
  hybrid
}

enum InvestmentStatus {
  active
  exited
  writtenoff
}

enum JobApplicationStatus {
  pending
  reviewed
  interviewed
  accepted
  rejected
}

enum JobApplicationWorkMode {
  onsite
  remote
  hybrid
}

enum UserRole {
  startup
  investor
  job_seeker
}

type Mutation {
  chat(conversationId: ID!, content: [AmplifyAIContentBlockInput], aiContext: AWSJSON, toolConfiguration: AmplifyAIToolConfigurationInput): AmplifyAIConversationMessage @conversation(aiModel: "anthropic.claude-3-5-sonnet-20240620-v1:0", systemPrompt: "You are an AI startup assistant for Altura, a platform connecting startups, investors, and job seekers. \n\nYour role is to help startup founders with:\n- Business strategy and growth advice\n- Hiring and team building guidance  \n- Funding and investment strategies\n- Product development and market analysis\n- Networking and partnership opportunities\n\nAlways provide practical, actionable advice tailored to the user's startup stage and industry. Be encouraging but realistic about challenges and opportunities.\n\nWhen discussing funding, consider the user's location and market context. For hiring, focus on practical recruitment strategies and cultural fit.\n\nKeep responses concise but comprehensive, and always ask follow-up questions to better understand their specific needs.", auth: { strategy: owner, provider: userPools }) @aws_cognito_user_pools
}

enum AmplifyAIConversationParticipantRole {
  user
  assistant
}

interface AmplifyAIConversationMessage {
  id: ID!
  conversationId: ID!
  associatedUserMessageId: ID
  role: AmplifyAIConversationParticipantRole
  content: [AmplifyAIContentBlock]
  aiContext: AWSJSON
  toolConfiguration: AmplifyAIToolConfiguration
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

input AmplifyAIDocumentBlockSourceInput {
  bytes: String
}

input AmplifyAIDocumentBlockInput {
  format: String!
  name: String!
  source: AmplifyAIDocumentBlockSourceInput!
}

input AmplifyAIImageBlockSourceInput {
  bytes: String
}

input AmplifyAIImageBlockInput {
  format: String!
  source: AmplifyAIImageBlockSourceInput!
}

input AmplifyAIToolUseBlockInput {
  toolUseId: String!
  name: String!
  input: AWSJSON!
}

input AmplifyAIToolResultContentBlockInput {
  document: AmplifyAIDocumentBlockInput
  image: AmplifyAIImageBlockInput
  json: AWSJSON
  text: String
}

input AmplifyAIToolResultBlockInput {
  content: [AmplifyAIToolResultContentBlockInput!]!
  toolUseId: String!
  status: String
}

type AmplifyAIDocumentBlockSource {
  bytes: String
}

type AmplifyAIDocumentBlock {
  format: String!
  name: String!
  source: AmplifyAIDocumentBlockSource!
}

type AmplifyAIImageBlock {
  format: String!
  source: AmplifyAIImageBlockSource!
}

type AmplifyAIImageBlockSource {
  bytes: String
}

type AmplifyAIToolUseBlock {
  toolUseId: String!
  name: String!
  input: AWSJSON!
}

type AmplifyAIToolResultContentBlock {
  document: AmplifyAIDocumentBlock
  image: AmplifyAIImageBlock
  json: AWSJSON
  text: String
}

type AmplifyAIToolResultBlock {
  content: [AmplifyAIToolResultContentBlock!]!
  toolUseId: String!
  status: String
}

type AmplifyAIContentBlockText {
  text: String
}

type AmplifyAIContentBlockImage {
  image: AmplifyAIImageBlock
}

type AmplifyAIContentBlockDocument {
  document: AmplifyAIDocumentBlock
}

type AmplifyAIContentBlockToolUse {
  toolUse: AmplifyAIToolUseBlock
}

type AmplifyAIContentBlockToolResult {
  toolResult: AmplifyAIToolResultBlock
}

input AmplifyAIContentBlockInput {
  text: String
  document: AmplifyAIDocumentBlockInput
  image: AmplifyAIImageBlockInput
  toolResult: AmplifyAIToolResultBlockInput
  toolUse: AmplifyAIToolUseBlockInput
}

type AmplifyAIContentBlock {
  text: String
  document: AmplifyAIDocumentBlock
  image: AmplifyAIImageBlock
  toolResult: AmplifyAIToolResultBlock
  toolUse: AmplifyAIToolUseBlock
}

input AmplifyAIToolConfigurationInput {
  tools: [AmplifyAIToolInput]
}

input AmplifyAIToolInput {
  toolSpec: AmplifyAIToolSpecificationInput
}

input AmplifyAIToolSpecificationInput {
  name: String!
  description: String
  inputSchema: AmplifyAIToolInputSchemaInput!
}

input AmplifyAIToolInputSchemaInput {
  json: AWSJSON
}

type AmplifyAIToolConfiguration {
  tools: [AmplifyAITool]
}

type AmplifyAITool {
  toolSpec: AmplifyAIToolSpecification
}

type AmplifyAIToolSpecification {
  name: String!
  description: String
  inputSchema: AmplifyAIToolInputSchema!
}

type AmplifyAIToolInputSchema {
  json: AWSJSON
}

type AmplifyAIConversationMessageStreamPart @aws_cognito_user_pools {
  id: ID!
  owner: String
  conversationId: ID!
  associatedUserMessageId: ID!
  contentBlockIndex: Int
  contentBlockText: String
  contentBlockDeltaIndex: Int
  contentBlockToolUse: AmplifyAIToolUseBlock
  contentBlockDoneAtIndex: Int
  stopReason: String
  errors: [AmplifyAIConversationTurnError]
  p: String
}

type AmplifyAIConversationTurnError @aws_cognito_user_pools {
  message: String!
  errorType: String!
}